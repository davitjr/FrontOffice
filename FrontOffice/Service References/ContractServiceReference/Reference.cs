//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrontOffice.ContractServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contract", Namespace="http://schemas.datacontract.org/2004/07/ContractService")]
    [System.SerializableAttribute()]
    public partial class Contract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<FrontOffice.ContractServiceReference.StringKeyValueArray> ArraysListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttachDocTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte AttachFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttachSourceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContractNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DigitalContractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FooterHeightForContractsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<FrontOffice.ContractServiceReference.KeyValuePairOfstringstring> FormulasListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFilledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LoanContractWithQRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewGUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<FrontOffice.ContractServiceReference.StringKeyValue> ParametersListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<FrontOffice.ContractServiceReference.StringKeyValueArray> ArraysList {
            get {
                return this.ArraysListField;
            }
            set {
                if ((object.ReferenceEquals(this.ArraysListField, value) != true)) {
                    this.ArraysListField = value;
                    this.RaisePropertyChanged("ArraysList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttachDocType {
            get {
                return this.AttachDocTypeField;
            }
            set {
                if ((this.AttachDocTypeField.Equals(value) != true)) {
                    this.AttachDocTypeField = value;
                    this.RaisePropertyChanged("AttachDocType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte AttachFile {
            get {
                return this.AttachFileField;
            }
            set {
                if ((this.AttachFileField.Equals(value) != true)) {
                    this.AttachFileField = value;
                    this.RaisePropertyChanged("AttachFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttachSourceType {
            get {
                return this.AttachSourceTypeField;
            }
            set {
                if ((this.AttachSourceTypeField.Equals(value) != true)) {
                    this.AttachSourceTypeField = value;
                    this.RaisePropertyChanged("AttachSourceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractName {
            get {
                return this.ContractNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractNameField, value) != true)) {
                    this.ContractNameField = value;
                    this.RaisePropertyChanged("ContractName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DigitalContract {
            get {
                return this.DigitalContractField;
            }
            set {
                if ((this.DigitalContractField.Equals(value) != true)) {
                    this.DigitalContractField = value;
                    this.RaisePropertyChanged("DigitalContract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocID {
            get {
                return this.DocIDField;
            }
            set {
                if ((this.DocIDField.Equals(value) != true)) {
                    this.DocIDField = value;
                    this.RaisePropertyChanged("DocID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FooterHeightForContracts {
            get {
                return this.FooterHeightForContractsField;
            }
            set {
                if ((this.FooterHeightForContractsField.Equals(value) != true)) {
                    this.FooterHeightForContractsField = value;
                    this.RaisePropertyChanged("FooterHeightForContracts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<FrontOffice.ContractServiceReference.KeyValuePairOfstringstring> FormulasList {
            get {
                return this.FormulasListField;
            }
            set {
                if ((object.ReferenceEquals(this.FormulasListField, value) != true)) {
                    this.FormulasListField = value;
                    this.RaisePropertyChanged("FormulasList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFilled {
            get {
                return this.IsFilledField;
            }
            set {
                if ((this.IsFilledField.Equals(value) != true)) {
                    this.IsFilledField = value;
                    this.RaisePropertyChanged("IsFilled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LoanContractWithQR {
            get {
                return this.LoanContractWithQRField;
            }
            set {
                if ((this.LoanContractWithQRField.Equals(value) != true)) {
                    this.LoanContractWithQRField = value;
                    this.RaisePropertyChanged("LoanContractWithQR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewGUID {
            get {
                return this.NewGUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.NewGUIDField, value) != true)) {
                    this.NewGUIDField = value;
                    this.RaisePropertyChanged("NewGUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<FrontOffice.ContractServiceReference.StringKeyValue> ParametersList {
            get {
                return this.ParametersListField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersListField, value) != true)) {
                    this.ParametersListField = value;
                    this.RaisePropertyChanged("ParametersList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductNumber {
            get {
                return this.ProductNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNumberField, value) != true)) {
                    this.ProductNumberField = value;
                    this.RaisePropertyChanged("ProductNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string content {
            get {
                return this.contentField;
            }
            set {
                if ((object.ReferenceEquals(this.contentField, value) != true)) {
                    this.contentField = value;
                    this.RaisePropertyChanged("content");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringKeyValueArray", Namespace="http://schemas.datacontract.org/2004/07/ContractService")]
    [System.SerializableAttribute()]
    public partial class StringKeyValueArray : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyValuePairOfstringstring", Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic")]
    [System.SerializableAttribute()]
    public partial struct KeyValuePairOfstringstring : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string keyField;
        
        private string valueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                if ((object.ReferenceEquals(this.keyField, value) != true)) {
                    this.keyField = value;
                    this.RaisePropertyChanged("key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                if ((object.ReferenceEquals(this.valueField, value) != true)) {
                    this.valueField = value;
                    this.RaisePropertyChanged("value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringKeyValue", Namespace="http://schemas.datacontract.org/2004/07/ContractService")]
    [System.SerializableAttribute()]
    public partial class StringKeyValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Version", Namespace="http://schemas.datacontract.org/2004/07/System")]
    [System.SerializableAttribute()]
    public partial class Version : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int _BuildField;
        
        private int _MajorField;
        
        private int _MinorField;
        
        private int _RevisionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Build {
            get {
                return this._BuildField;
            }
            set {
                if ((this._BuildField.Equals(value) != true)) {
                    this._BuildField = value;
                    this.RaisePropertyChanged("_Build");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Major {
            get {
                return this._MajorField;
            }
            set {
                if ((this._MajorField.Equals(value) != true)) {
                    this._MajorField = value;
                    this.RaisePropertyChanged("_Major");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Minor {
            get {
                return this._MinorField;
            }
            set {
                if ((this._MinorField.Equals(value) != true)) {
                    this._MinorField = value;
                    this.RaisePropertyChanged("_Minor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Revision {
            get {
                return this._RevisionField;
            }
            set {
                if ((this._RevisionField.Equals(value) != true)) {
                    this._RevisionField = value;
                    this.RaisePropertyChanged("_Revision");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContractServiceReference.IContractOerationService")]
    public interface IContractOerationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadContract", ReplyAction="http://tempuri.org/IContractOerationService/DownloadContractResponse")]
        byte[] DownloadContract(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadContract", ReplyAction="http://tempuri.org/IContractOerationService/DownloadContractResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadContractAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadContractEXCEL", ReplyAction="http://tempuri.org/IContractOerationService/DownloadContractEXCELResponse")]
        byte[] DownloadContractEXCEL(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadContractEXCEL", ReplyAction="http://tempuri.org/IContractOerationService/DownloadContractEXCELResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadContractEXCELAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadContractWORD", ReplyAction="http://tempuri.org/IContractOerationService/DownloadContractWORDResponse")]
        byte[] DownloadContractWORD(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadContractWORD", ReplyAction="http://tempuri.org/IContractOerationService/DownloadContractWORDResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadContractWORDAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadContractHTML", ReplyAction="http://tempuri.org/IContractOerationService/DownloadContractHTMLResponse")]
        string DownloadContractHTML(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadContractHTML", ReplyAction="http://tempuri.org/IContractOerationService/DownloadContractHTMLResponse")]
        System.Threading.Tasks.Task<string> DownloadContractHTMLAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadEmployeesContractWord", ReplyAction="http://tempuri.org/IContractOerationService/DownloadEmployeesContractWordResponse" +
            "")]
        byte[] DownloadEmployeesContractWord(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/DownloadEmployeesContractWord", ReplyAction="http://tempuri.org/IContractOerationService/DownloadEmployeesContractWordResponse" +
            "")]
        System.Threading.Tasks.Task<byte[]> DownloadEmployeesContractWordAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/CheckProgramVersion", ReplyAction="http://tempuri.org/IContractOerationService/CheckProgramVersionResponse")]
        bool CheckProgramVersion(short programId, FrontOffice.ContractServiceReference.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContractOerationService/CheckProgramVersion", ReplyAction="http://tempuri.org/IContractOerationService/CheckProgramVersionResponse")]
        System.Threading.Tasks.Task<bool> CheckProgramVersionAsync(short programId, FrontOffice.ContractServiceReference.Version version);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractOerationServiceChannel : FrontOffice.ContractServiceReference.IContractOerationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractOerationServiceClient : System.ServiceModel.ClientBase<FrontOffice.ContractServiceReference.IContractOerationService>, FrontOffice.ContractServiceReference.IContractOerationService {
        
        public ContractOerationServiceClient() {
        }
        
        public ContractOerationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContractOerationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractOerationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContractOerationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] DownloadContract(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadContract(contract, userName, ClientIp);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadContractAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadContractAsync(contract, userName, ClientIp);
        }
        
        public byte[] DownloadContractEXCEL(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadContractEXCEL(contract, userName, ClientIp);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadContractEXCELAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadContractEXCELAsync(contract, userName, ClientIp);
        }
        
        public byte[] DownloadContractWORD(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadContractWORD(contract, userName, ClientIp);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadContractWORDAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadContractWORDAsync(contract, userName, ClientIp);
        }
        
        public string DownloadContractHTML(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadContractHTML(contract, userName, ClientIp);
        }
        
        public System.Threading.Tasks.Task<string> DownloadContractHTMLAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadContractHTMLAsync(contract, userName, ClientIp);
        }
        
        public byte[] DownloadEmployeesContractWord(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadEmployeesContractWord(contract, userName, ClientIp);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadEmployeesContractWordAsync(FrontOffice.ContractServiceReference.Contract contract, string userName, string ClientIp) {
            return base.Channel.DownloadEmployeesContractWordAsync(contract, userName, ClientIp);
        }
        
        public bool CheckProgramVersion(short programId, FrontOffice.ContractServiceReference.Version version) {
            return base.Channel.CheckProgramVersion(programId, version);
        }
        
        public System.Threading.Tasks.Task<bool> CheckProgramVersionAsync(short programId, FrontOffice.ContractServiceReference.Version version) {
            return base.Channel.CheckProgramVersionAsync(programId, version);
        }
    }
}
